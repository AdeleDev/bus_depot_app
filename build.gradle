plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagement}"
    id 'java'
    id 'org.openapi.generator' version "${openapiGenVersion}"
}



group = 'depot.busmanagement'

tasks.withType(JavaCompile) {
    options.encoding = "$sourceEncoding"
}

repositories {
    mavenCentral()
}

bootRun {
    mainClass = 'company.busmanagement.BusApplication'
}

bootJar {
    mainClass = 'company.busmanagement.BusApplication'
    manifest {
        attributes(
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']})",
                'Build-Tool': "Gradle $gradle.gradleVersion",
                'Built-By': System.properties['user.name'],
                'Implementation-Title': rootProject.name,
                'Implementation-Vendor': 'Vendor',
                'Implementation-Version': "$project.version"
        )
    }
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/openapi-generated-src", "$buildDir/wsdl-generated-src"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file("src/integration-test/resources")
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestImplementation.extendsFrom implementation

    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation("net.logstash.logback:logstash-logback-encoder:$logstashEncoderVersion") { transitive = false }
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.plugin:spring-plugin-core:$springCoreVersion"
    implementation "com.github.joschi.jackson:jackson-datatype-threetenbp:$jacksonVersion"
    implementation "jakarta.validation:jakarta.validation-api"
    implementation "org.springframework.boot:spring-boot-starter-test"
    implementation "io.swagger.core.v3:swagger-annotations:$swaggerVersion"
    implementation "org.openapitools:jackson-databind-nullable:$jacksonNullableVersion"
    implementation "org.hibernate.validator:hibernate-validator:${hibernateVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    implementation "com.h2database:h2"

}

test {
    useJUnitPlatform()
}
openApiGenerate{
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/api/BusService_OpenApi_1.0.0.yaml"
    outputDir = "$buildDir/openapi-generated-src"

    configOptions = [
            dateLibrary   : "java17",
            sourceFolder  : "",
            returnResponse: "true",
            interfaceOnly : "true"
    ]
    globalProperties = [
            apis: "",
            apiDocs: "false",
            modelDocs: "false",
            models: "",
            supportingFiles:  "ApiUtil.java"
    ]
    apiPackage = "company.busmanagement.busservice.api"
    modelPackage = "company.busmanagement.busservice.model"
    modelNameSuffix = "Dto"
    generateApiTests = false
    generateModelTests = false
}

compileJava.dependsOn tasks.openApiGenerate

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform()
    jvmArgs(['--enable-preview'])

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    outputs.upToDateWhen { false }
}
